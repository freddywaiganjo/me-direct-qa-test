{
	"info": {
		"_postman_id": "2d065672-c8b6-4fe6-ad7c-755959381060",
		"name": "FakeRESTApi",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3131076"
	},
	"item": [
		{
			"name": "Activities",
			"item": [
				{
					"name": "Get Activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"for (element in jsonData) {",
									"    id=jsonData[element].id;",
									"\ttitle = jsonData[element].title;",
									"    duedate = jsonData[element].dueDate;",
									"    completed = jsonData[element].completed;",
									"}",
									"console.log(id);",
									"pm.test(\"response ID is an integer\", function () {",
									"    pm.expect(id).to.be.a(\"number\");",
									"});",
									"",
									"pm.test(\"response ID not null\", function () {",
									"   pm.expect(id).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response title is a string\", function () {",
									"    pm.expect(title).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"response title not null\", function () {",
									"   pm.expect(title).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response duedate is not null\", function () {",
									"   pm.expect(title).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response completed is true\", function () {",
									"    pm.expect(completed).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/Activities",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Activities"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post Activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"for (element in jsonData) {",
									"    id=jsonData.id;",
									"\ttitle = jsonData.title;",
									"    duedate = jsonData.dueDate;",
									"    completed = jsonData.completed;",
									"}",
									"console.log(id);",
									"pm.test(\"response ID is an integer\", function () {",
									"    pm.expect(id).to.be.a(\"number\");",
									"});",
									"",
									"pm.test(\"response ID not null\", function () {",
									"   pm.expect(id).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response title is a string\", function () {",
									"    pm.expect(title).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"response title not null\", function () {",
									"   pm.expect(title).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response duedate is not null\", function () {",
									"   pm.expect(title).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response completed is true\", function () {",
									"    pm.expect(completed).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 50,\n  \"title\": \"alex\",\n  \"dueDate\": \"2024-12-01T11:20:38.451Z\",\n  \"completed\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/Activities",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Activities"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Get Activity by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"for (element in jsonData) {",
									"    id=jsonData.id;",
									"\ttitle = jsonData.title;",
									"    duedate = jsonData.dueDate;",
									"    completed = jsonData.completed;",
									"}",
									"console.log(id);",
									"pm.test(\"response ID is an integer\", function () {",
									"    pm.expect(id).to.be.a(\"number\");",
									"});",
									"",
									"pm.test(\"response ID not null\", function () {",
									"   pm.expect(id).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response title is a string\", function () {",
									"    pm.expect(title).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"response title not null\", function () {",
									"   pm.expect(title).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response duedate is not null\", function () {",
									"   pm.expect(title).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response completed is true\", function () {",
									"    pm.expect(completed).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/Activities/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Activities",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "PUT Activity by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"for (element in jsonData) {",
									"    id=jsonData.id;",
									"\ttitle = jsonData.title;",
									"    duedate = jsonData.dueDate;",
									"    completed = jsonData.completed;",
									"}",
									"console.log(id);",
									"pm.test(\"response ID is an integer\", function () {",
									"    pm.expect(id).to.be.a(\"number\");",
									"});",
									"",
									"pm.test(\"response ID not null\", function () {",
									"   pm.expect(id).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response title is a string\", function () {",
									"    pm.expect(title).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"response title not null\", function () {",
									"   pm.expect(title).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response duedate is not null\", function () {",
									"   pm.expect(title).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response completed is true\", function () {",
									"    pm.expect(completed).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1,\r\n  \"title\": \"alex\",\r\n  \"dueDate\": \"2024-12-01T11:25:30.185Z\",\r\n  \"completed\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/Activities/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Activities",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "DELETE Activity by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/Activities/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Activities",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Authors",
			"item": [
				{
					"name": "Get Authors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"for (element in jsonData) {",
									"    id=jsonData[element].id;",
									"\tidBook = jsonData[element].idBook;",
									"    firstName = jsonData[element].firstName;",
									"    lastName = jsonData[element].lastName;",
									"}",
									"pm.test(\"response ID is an integer\", function () {",
									"    pm.expect(id).to.be.a(\"number\");",
									"});",
									"",
									"pm.test(\"response ID not null\", function () {",
									"   pm.expect(id).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response idBook  is a number\", function () {",
									"    pm.expect(idBook).to.be.a(\"number\");",
									"});",
									"",
									"pm.test(\"response idBook not null\", function () {",
									"   pm.expect(idBook).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response firstName is not null\", function () {",
									"   pm.expect(firstName).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response firstName  is a number\", function () {",
									"    pm.expect(firstName).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"response lastName is not null\", function () {",
									"   pm.expect(firstName).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response lastName  is a number\", function () {",
									"    pm.expect(firstName).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/Authors",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Authors"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post Authors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"for (element in jsonData) {",
									"    id=jsonData.id;",
									"\tidBook = jsonData.idBook;",
									"    firstName = jsonData.firstName;",
									"    lastName = jsonData.lastName;",
									"}",
									"pm.test(\"response ID is an integer\", function () {",
									"    pm.expect(id).to.be.a(\"number\");",
									"});",
									"",
									"pm.test(\"response ID not null\", function () {",
									"   pm.expect(id).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response idBook is an integer\", function () {",
									"    pm.expect(idBook).to.be.a(\"number\");",
									"});",
									"",
									"pm.test(\"response idBook not null\", function () {",
									"   pm.expect(idBook).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response firstName is not null\", function () {",
									"   pm.expect(firstName).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response firstName is an string\", function () {",
									"    pm.expect(firstName).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"response lastName is not null\", function () {",
									"   pm.expect(lastName).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response lastName is an string\", function () {",
									"    pm.expect(lastName).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"idBook\": 0,\n  \"firstName\": \"string\",\n  \"lastName\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/Authors",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Authors"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Get Author Book by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"for (element in jsonData) {",
									"    id=jsonData[element].id;",
									"\tidBook = jsonData[element].idBook;",
									"    firstName = jsonData[element].firstName;",
									"    lastName = jsonData[element].lastName;",
									"}",
									"pm.test(\"response ID is an integer\", function () {",
									"    pm.expect(id).to.be.a(\"number\");",
									"});",
									"",
									"pm.test(\"response ID not null\", function () {",
									"   pm.expect(id).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response idBook is an integer\", function () {",
									"    pm.expect(idBook).to.be.a(\"number\");",
									"});",
									"",
									"pm.test(\"response idBook not null\", function () {",
									"   pm.expect(idBook).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response firstName is not null\", function () {",
									"   pm.expect(firstName).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response firstName is a string\", function () {",
									"    pm.expect(firstName).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"response lastName is not null\", function () {",
									"   pm.expect(lastName).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response lastName is a string\", function () {",
									"    pm.expect(lastName).to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/Authors/authors/books/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Authors",
								"authors",
								"books",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Author by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"for (element in jsonData) {",
									"    id=jsonData.id;",
									"\tidBook = jsonData.idBook;",
									"    firstName = jsonData.firstName;",
									"    lastName = jsonData.lastName;",
									"}",
									"pm.test(\"response ID is an integer\", function () {",
									"    pm.expect(id).to.be.a(\"number\");",
									"});",
									"",
									"pm.test(\"response ID not null\", function () {",
									"   pm.expect(id).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response idBook is an integer\", function () {",
									"    pm.expect(idBook).to.be.a(\"number\");",
									"});",
									"",
									"pm.test(\"response idBook not null\", function () {",
									"   pm.expect(idBook).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response firstName is a string\", function () {",
									"    pm.expect(firstName).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"response firstName is not null\", function () {",
									"   pm.expect(firstName).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response lastName is a string\", function () {",
									"    pm.expect(lastName).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"response lastName is not null\", function () {",
									"   pm.expect(lastName).not.null.and.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/Authors/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Authors",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "PUT Author by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"for (element in jsonData) {",
									"    id=jsonData.id;",
									"\tidBook = jsonData.idBook;",
									"    firstName = jsonData.firstName;",
									"    lastName = jsonData.lastName;",
									"}",
									"console.log(id);",
									"pm.test(\"response ID is an integer\", function () {",
									"    pm.expect(id).to.be.a(\"number\");",
									"});",
									"",
									"pm.test(\"response ID not null\", function () {",
									"   pm.expect(id).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response idBook is an integer\", function () {",
									"    pm.expect(idBook).to.be.a(\"number\");",
									"});",
									"",
									"pm.test(\"response idBook not null\", function () {",
									"   pm.expect(idBook).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response firstName is not null\", function () {",
									"   pm.expect(firstName).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response firstName is a string\", function () {",
									"    pm.expect(firstName).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"response lastName is not null\", function () {",
									"   pm.expect(lastName).not.null.and.undefined;",
									"});",
									"",
									"pm.test(\"response lastName is a string\", function () {",
									"    pm.expect(lastName).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"idBook\": 0,\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/Authors/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Authors",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "DELETE Auther by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/Authors/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Authors",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Books",
			"item": [
				{
					"name": "Get Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/Books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Books"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"title\": \"string\",\n  \"description\": \"string\",\n  \"pageCount\": 0,\n  \"excerpt\": \"string\",\n  \"publishDate\": \"2024-12-01T11:45:39.301Z\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/Books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Books"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Get Books by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/Books/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Books",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "PUT Books by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"title\": \"string\",\r\n  \"description\": \"string\",\r\n  \"pageCount\": 0,\r\n  \"excerpt\": \"string\",\r\n  \"publishDate\": \"2024-12-01T11:47:34.658Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/Books/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Books",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "DELETE Books by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/Books/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Books",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "CoverPhotos",
			"item": [
				{
					"name": "Get CoverPhotos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/CoverPhotos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"CoverPhotos"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post CoverPhotos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"idBook\": 0,\n  \"url\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/CoverPhotos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"CoverPhotos"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Get book cover photo by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/CoverPhotos/books/covers/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"CoverPhotos",
								"books",
								"covers",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "PUT CoverPhoto by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"idBook\": 0,\r\n  \"url\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/CoverPhotos/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"CoverPhotos",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "DELETE coverPhoto by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/CoverPhotos/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"CoverPhotos",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get coverPhoto by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/CoverPhotos/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"CoverPhotos",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/Users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Users"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"userName\": \"string\",\n  \"password\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/Users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Users"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Get Users by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/Users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Users",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "PUT Users by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"userName\": \"string\",\r\n  \"password\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/Users/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Users",
								"2"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "DELETE Users by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/Users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Users",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://fakerestapi.azurewebsites.net"
		}
	]
}